Гоша Дударь Изучение ASP.NET Core MVC / 

1 видео.
ASP.Net платформа для разработки Web-проектов, он более скоростной, чем скриптовые языки, так как основа компилируется и передается на ПК в момент подключения к саqту, а все последующие переходы по сайту используют кэшированный код, который просто извлекается из памяти, а не скачивается с сервера повторно (экономит время на парсинге, загрузке и обработке файлов).
Ресурсы на ASP.Net:
StackOverflow (один из самых крупных форумов)
Основной сайт Майкрософт
GoDaddy (крупнейший сайт для регистрации доменов)
Офф. сайт DELL

В ASP.Net применяется шаблон MVC (model - view - controller)
Пользователь запускает процесс регистрации и отправляет на сервер регистрационные данные,
контроллер интерпретирует действия человека и передает модели информацию о внесенных изменениях
в статус пользователя, модель реагирует на действия контроллера и работает с поставленными данными.
Вид - отвечает за отображжения информации поставленной с модели.
Модель - отвечает за функционал: подкл. к БД, обработку к-либо данных.
Вид - отображение данных на страничке
Контроллер - связывает вид и модель между собой

.Net Core - кросс-платформенная среда выполнения для построение веб и консольных программ. программные продукты разраб. на ней могут выполняться на линукс и Мак ОС

Файл - создать - Проект - .Net Core - Web-приложение ASP.Net Core - Пустой проект(шаблон)

2 видео.
Структура папок проекта.
Connected Services - графически интерфейс для подкл. различн. служб к программе (мож. подкл. облачное хранилище и т.п.)
Properties - различные свойства для работы проекта. 
Properties - LaunshSettings.json - прописуется локальный сервер и порт, по которому будет доступен проект/сайт
Зависимости - различные библиотеки и плагины
appsettings.json - настройки режимов запуска проекта (Debug/Release)
Program.cs - тут точка входа функция Main
Startup.cs - для различных настроек (функция Configure)

Подключение библиотек:
Решение - ПКМ - Управление пакетами NuGet для решения... - Обзор - установим 2 пакета (плагина):
1) Microsoft.AspNetCore.StaticFiles - служит для работы со статич. файлами (файлы изображений, стилей)
2) Microsoft.AspNet.Mvc -  плагин для работы с моделью MVC

Startup.cs - функция ConfigureServices - служит для регистрации модулей и плагинов в проекте
Startup.cs - функция Configure - конфигурирование подключенный модулей и плагинов


3 видео.
Модель - класс, моделирующий какую-то сущность (Car, Category)
Интерфейсы - содержат функции, способные вытягивать информацию из классов моделей.
Файлы Mocks - классы, которые реализуют интерфейсы проекта и конструируются на основе моделей (объединяют модели и интерфейсы)
Файлы Mocks - позволяют реализовать интерфейсы, наполнит информацией модели.
Файл Mock - обычный класс. Именование файла Mock<класс_модели/интерфейса)>

4 видео.
Все Html-шаблоны нужно хранить в папке View. В этой папке создаем еще одну папку с названием, аналогичным контроллеру. CarsController - новая папка Car. Папка Car будет содержать все Html-шаблоны, которые будут прописаны в CarsController (List.cshtml)

List.cshtml - Создать -> Представление (Вид) (вид шаблона Empty) Название файла List определяется по названию метода public ViewResult List() файла CarsController.cs (так как этот метод вызывает исполнение кода в файле List.cshtml)

C# код в файлах  cshtml выносится в виде @{C#-код }

Layout - понятие "главный шаблон" - основной, статический макет сайта, в который потом вставляются другие блоки (шаблоны)

_Layout.cshtml - @RenderBody() -  встраивает различные блоки (кода), в частности лист List.cshtml
_Layout.cshtml - это общий шаблон
_ViewStart.cshtml - отвечает за то, в какой шаблон будут встраиваться дополнительные блоки
_ViewImport - тут подключаются дополнительные файлы
List.cshtml - содержит блоки кода (встраиваются в общий _Layout.cshtml)

5 видео
Гоша Дударь Изучение ASP.NET Core MVC / 

1 Age----------------------------------------------
ASP.Net платформа для разработки Web-проектов, он более скоростной, чем скриптовые языки, так как основа компилируется и передается на ПК в момент подключения к саqту, а все последующие переходы по сайту используют кэшированный код, который просто извлекается из памяти, а не скачивается с сервера повторно (экономит время на парсинге, загрузке и обработке файлов).
Ресурсы на ASP.Net:
StackOverflow (один из самых крупных форумов)
Основной сайт Майкрософт
GoDaddy (крупнейший сайт для регистрации доменов)
Офф. сайт DELL

В ASP.Net применяется шаблон MVC (model - view - controller)
Пользователь запускает процесс регистрации и отправляет на сервер регистрационные данные,
контроллер интерпретирует действия человека и передает модели информацию о внесенных изменениях
в статус пользователя, модель реагирует на действия контроллера и работает с поставленными данными.
Вид - отвечает за отображжения информации поставленной с модели.
Модель - отвечает за функционал: подкл. к БД, обработку к-либо данных.
Вид - отображение данных на страничке
Контроллер - связывает вид и модель между собой

.Net Core - кросс-платформенная среда выполнения для построение веб и консольных программ. программные продукты разраб. на ней могут выполняться на линукс и Мак ОС

Файл - создать - Проект - .Net Core - Web-приложение ASP.Net Core - Пустой проект(шаблон)

2 Age-------------------------------------------------------
Структура папок проекта.
Connected Services - графически интерфейс для подкл. различн. служб к программе (мож. подкл. облачное хранилище и т.п.)
Properties - различные свойства для работы проекта. 
Properties - LaunshSettings.json - прописуется локальный сервер и порт, по которому будет доступен проект/сайт
Зависимости - различные библиотеки и плагины
appsettings.json - настройки режимов запуска проекта (Debug/Release)
Program.cs - тут точка входа функция Main
Startup.cs - для различных настроек (функция Configure)

Подключение библиотек:
Решение - ПКМ - Управление пакетами NuGet для решения... - Обзор - установим 2 пакета (плагина):
1) Microsoft.AspNetCore.StaticFiles - служит для работы со статич. файлами (файлы изображений, стилей)
2) Microsoft.AspNet.Mvc -  плагин для работы с моделью MVC

Startup.cs - функция ConfigureServices - служит для регистрации модулей и плагинов в проекте
Startup.cs - функция Configure - конфигурирование подключенный модулей и плагинов


3 Age------------------------------------------------------------
Модель - класс, моделирующий какую-то сущность (Car, Category)
Интерфейсы - содержат функции, способные вытягивать информацию из классов моделей.
Файлы Mocks - классы, которые реализуют интерфейсы проекта и конструируются на основе моделей (объединяют модели и интерфейсы)
Файлы Mocks - позволяют реализовать интерфейсы, наполнит информацией модели.
Файл Mock - обычный класс. Именование файла Mock<класс_модели/интерфейса)>

4 Age-----------------------------------------------------
Все Html-шаблоны нужно хранить в папке View. В этой папке создаем еще одну папку с названием, аналогичным контроллеру. CarsController - новая папка Car. Папка Car будет содержать все Html-шаблоны, которые будут прописаны в CarsController (List.cshtml)

List.cshtml - Создать -> Представление (Вид) (вид шаблона Empty) Название файла List определяется по названию метода public ViewResult List() файла CarsController.cs (так как этот метод вызывает исполнение кода в файле List.cshtml)

C# код в файлах  cshtml выносится в виде @{C#-код }

Layout - понятие "главный шаблон" - основной, статический макет сайта, в который потом вставляются другие блоки (шаблоны)

_Layout.cshtml - @RenderBody() -  встраивает различные блоки (кода), в частности лист List.cshtml
_Layout.cshtml - это общий шаблон
_ViewStart.cshtml - отвечает за то, в какой шаблон будут встраиваться дополнительные блоки
_ViewImport - тут подключаются дополнительные файлы
List.cshtml - содержит блоки кода (встраиваются в общий _Layout.cshtml)

5 Age--------------------------------------------------
bootstrap - небольшой фреймворк разработанный компанией Твиттер, включает большой набор различных CSS и JavaScript готовых решений. Применяет к объектам стили bootstrap
1) Способ подключения - при помощи ссылок cdn: https://www.bootstrapcdn.com, подключение по ссылкам в _Layout.cshtml
 <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" type="text/css"/>
2) Способ подключения Через NuGet
3) Способ подключения: скачать с сайта Compiled CSS and JS, распаковываем, копируем файл bootstrap.min.css и сохраняем в wwwroot\CSS. То же самое проделать для js (JavaScript), далее подключаем в _Layout.cshtml командой
 <link href="~/css/bootstrap.min.css" rel="stylesheet" type="text/css"/>
 
Синтаксис bootstrap:
<div class ="row mt-5 mb-4"> здается дополнительный блок
mt - verge top - 5, mb - merge bottom - 4 отступы сверху и снизу


6 Age----------------------------------------------------
Установка NuGet - 
EntityFramework 
JSON (Daniel Crenna)
Microsoft.EntityFrameworkCore
Microsoft.EntityFrameworkCore.Tools
Microsoft.EntityFrameworkCore.SqlServer
Создание БД: (20-ая мин. 6 видео)
Вид -> Другие окна -> Консоль диспетчера пакетов,
выполнить миграцию в открывшемся снизу окне. Миграция -создает доп. файлы, которые создают таблици и т.п.в БД 
команда для миграции: add-migration initial
initial -  просто название для миграции (придумывает пользователь)
полный вид команды: EntityFrameworkCore\Add-Migration Initial
В рез-те выполнения команды создалась папка Migration, содержимое которой и послужит для создания таблиц и БД и т.п.
Закончить сборку БД можно командой: EntityFrameworkCore\Update-DataBase
Data\DBObject.cs - для добавления записей в БД

Прописываем в класс Startup, в методе Configere, добавляем метод, который будет при запуске приложения добавлять объекты в БД, по средствам вызова статического методы  DBObject.Initial()


7 Age----------------------------------------------------

EntityFrameworkCore\Add-Migration ShopCart-Add
EntityFrameworkCore\Update-DataBase

Microsoft.AspNetCore.Session
Microsoft.EntityFrameworkCore.InMemory
Microsoft.AspNetCore.Session.Http.Extensions

При установке плагинов (NuGet) их необходимо подключить в Startup.cs -> ConfigureServices(), перед подключением services.AddMvc()
кроме AddMemoryCache (его после services.AddMvc()), и, чтобы завершить добавление работы сессий, в Configure() добавляем

